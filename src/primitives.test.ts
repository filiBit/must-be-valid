import { arrayOfStrings, arrayOfUnknowns, func1, func2, obj1, obj2 } from './mocks'
import { isNumber, isString, mustBeNumber, mustBeString } from './primitives'

describe('Strings validation', () => {
  test('isString() validation', () => {
    expect(isString('')).toBe(true)
    expect(isString('FJDG')).toBe(true)
    expect(isString(undefined)).toBe(false)
    expect(isString(null)).toBe(false)
    expect(isString(0)).toBe(false)
    expect(isString(5)).toBe(false)
    expect(isString(Infinity)).toBe(false)
    expect(isString(obj1)).toBe(false)
    expect(isString(obj2)).toBe(false)
    expect(isString(arrayOfUnknowns)).toBe(false)
    expect(isString(arrayOfStrings)).toBe(false)
    expect(isString(true)).toBe(false)
    expect(isString(false)).toBe(false)
    expect(isString(func1)).toBe(false)
    expect(isString(func2)).toBe(false)
  })

  test('mustBeString() validation', () => {
    expect(mustBeString('')).toBe('')
    expect(mustBeString('FJDG')).toBe('FJDG')
    expect(() => mustBeString(undefined)).toThrowError()
    expect(() => mustBeString(null)).toThrowError()
    expect(() => mustBeString(0)).toThrowError()
    expect(() => mustBeString(5)).toThrowError()
    expect(() => mustBeString(Infinity)).toThrowError()
    expect(() => mustBeString(obj1)).toThrowError()
    expect(() => mustBeString(obj2)).toThrowError()
    expect(() => mustBeString(true)).toThrowError()
    expect(() => mustBeString(false)).toThrowError()
    expect(() => mustBeString(arrayOfUnknowns)).toThrowError()
    expect(() => mustBeString(arrayOfStrings)).toThrowError()
    expect(() => mustBeString(func1)).toThrowError()
    expect(() => mustBeString(func2)).toThrowError()
  })
})

describe('Numbers validation', () => {
  test('isNumber() validation', () => {
    expect(isNumber('')).toBe(false)
    expect(isNumber('FJDG')).toBe(false)
    expect(isNumber(undefined)).toBe(false)
    expect(isNumber(null)).toBe(false)
    expect(isNumber(0)).toBe(true)
    expect(isNumber(5)).toBe(true)
    expect(isNumber(Infinity)).toBe(true)
    expect(isNumber(obj1)).toBe(false)
    expect(isNumber(obj2)).toBe(false)
    expect(isNumber(arrayOfUnknowns)).toBe(false)
    expect(isNumber(arrayOfStrings)).toBe(false)
    expect(isNumber(true)).toBe(false)
    expect(isNumber(false)).toBe(false)
    expect(isNumber(func1)).toBe(false)
    expect(isNumber(func2)).toBe(false)
  })

  test('mustBeNumber() validation', () => {
    expect(() => mustBeNumber('')).toThrowError()
    expect(() => mustBeNumber('FJDG')).toThrowError()
    expect(() => mustBeNumber(undefined)).toThrowError()
    expect(() => mustBeNumber(null)).toThrowError()
    expect(mustBeNumber(0)).toBe(0)
    expect(mustBeNumber(5)).toBe(5)
    expect(mustBeNumber(Infinity)).toBe(Infinity)
    expect(() => mustBeNumber(obj1)).toThrowError()
    expect(() => mustBeNumber(obj2)).toThrowError()
    expect(() => mustBeNumber(true)).toThrowError()
    expect(() => mustBeNumber(false)).toThrowError()
    expect(() => mustBeNumber(arrayOfUnknowns)).toThrowError()
    expect(() => mustBeNumber(arrayOfStrings)).toThrowError()
    expect(() => mustBeNumber(func1)).toThrowError()
    expect(() => mustBeNumber(func2)).toThrowError()
  })
})
